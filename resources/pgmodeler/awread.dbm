<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.3-beta1" use-changelog="false" last-position="0,0" last-zoom="1" max-obj-count="114"
	 default-schema="public" default-owner="postgres">
<role name="anonymous"
      inherit="true"
      encrypted="true"
      password="********">
	<roles names="postgres" role-type="member" />
</role>

<role name="reader"
      inherit="true"
      encrypted="true"
      password="********">
	<roles names="postgres" role-type="member" />
</role>

<role name="writer"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
	<roles names="postgres" role-type="member" />
</role>

<role name="admin"
      superuser="true"
      createdb="true"
      createrole="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<database name="awread_app" encoding="UTF8" lc-collate="en_US.UTF8" lc-ctype="en_US.UTF8" is-template="false" allow-conns="true">
	<role name="postgres"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" layer="0" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<extension name="pgcrypto" cur-version="1.3">
	<schema name="public"/>
	<comment><![CDATA[cryptographic functions]]></comment>
</extension>

<usertype name="jwt_token" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="user_id">
		<type name="text" length="0"/>
	</typeattrib>
	<typeattrib name="role">
		<type name="text" length="0"/>
	</typeattrib>
</usertype>

<table name="books" layer="0" collapse-mode="2" rls-enabled="true" max-obj-count="16" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="60" y="60"/>
	<column name="bookid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="title" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="img">
		<type name="text" length="0"/>
	</column>
	<column name="description">
		<type name="text" length="0"/>
	</column>
	<column name="rate">
		<type name="numeric" length="0"/>
	</column>
	<column name="completed">
		<type name="boolean" length="0"/>
	</column>
	<column name="publishedat">
		<type name="timestamp" length="0"/>
	</column>
	<column name="updatedat">
		<type name="timestamp" length="0"/>
	</column>
	<column name="viewcount">
		<type name="integer" length="0"/>
	</column>
	<column name="categoryid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="introduce">
		<type name="text" length="0"/>
	</column>
	<column name="tags">
		<type name="text" length="0" dimension="1"/>
	</column>
	<column name="type">
		<type name="text" length="0"/>
	</column>
	<column name="status">
		<type name="text" length="0"/>
	</column>
	<constraint name="books_pkey" type="pk-constr" table="public.books">
		<columns names="bookid" ref-type="src-columns"/>
	</constraint>
</table>

<function name="all_nominated_book"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="STABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="public.books" length="1"/>
	</return-type>
	<parameter name="authorids">
		<type name="text" length="0" dimension="1"/>
	</parameter>
	<parameter name="categoryids">
		<type name="text" length="0" dimension="1"/>
	</parameter>
	<definition><![CDATA[ 
	select * FROM books where userid  = ANY(authorIds) or categoryid = ANY(categoryIds);]]></definition>
</function>

<function name="current_roles"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<definition><![CDATA[	 select current_user;]]></definition>
</function>

<function name="current_user_id"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="STABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<definition><![CDATA[SELECT NULLIF(current_setting('jwt.claims.user_id', TRUE), '')::text;]]></definition>
</function>

<function name="filter_books"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="STABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="public.books" length="1"/>
	</return-type>
	<parameter name="categoryid">
		<type name="integer" length="0"/>
	</parameter>
	<parameter name="type">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="year">
		<type name="integer" length="0"/>
	</parameter>
	<definition><![CDATA[	select * from books b where
	b.categoryid = categoryid OR b.type = type 
	OR (select date_part('year', publishedat)) = year]]></definition>
</function>

<function name="filter_by_tags"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="STABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="public.books" length="1"/>
	</return-type>
	<parameter name="tag">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[	select * from books
	where to_tsvector(title) @@ to_tsquery(tag) or to_tsvector((select vn_unaccent(title))) @@ to_tsquery(tag);]]></definition>
</function>

<function name="increase_view_book_in_day"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="today">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="storyid">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[	BEGIN
		IF NOT EXISTS(SELECT * FROM outstanding_book where date = today)
			THEN INSERT INTO outstanding_book(date, bookid, viewcount) values (today, bookId, 1);
			
		ELSE
			UPDATE outstanding_book
				SET viewcount = viewcount + 1
				WHERE date = today and feature_book.bookid = bookId;
		END IF;
		RETURN 'success!';
	END;]]></definition>
</function>

<function name="insert_book_genre"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="integer" length="1"/>
	</return-type>
	<parameter name="genreids">
		<type name="text" length="0" dimension="1"/>
	</parameter>
	<parameter name="bookid">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
		i text;
	BEGIN
		FOREACH i IN ARRAY genreIds
		   LOOP 
			  INSERT INTO book_genre(genreid, bookid) values (i, bookid) ;
		   END LOOP;
		   return bookid;
	END;]]></definition>
</function>

<function name="insert_user_book"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="integer" length="1"/>
	</return-type>
	<parameter name="authorids">
		<type name="text" length="0" dimension="1"/>
	</parameter>
	<parameter name="bookid">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[	DECLARE
		i text;
		date Date := (select now());
	BEGIN
		FOREACH i IN ARRAY authorIds
		   LOOP 
			  INSERT INTO user_book(userid, bookid, publishedat) values (i, bookid, date) ;
		   END LOOP;
		   return bookid;
	END;]]></definition>
</function>

<function name="signinreader"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="public.jwt_token" length="1"/>
	</return-type>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="role">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
        token_information jwt_token;
BEGIN
        SELECT $3, u.userid
               INTO token_information
               FROM awread_private.user_account u
               WHERE u.account = $1 AND u.password = crypt($2, u.password);
		IF token_information::jwt_token IS NULL
			THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác';
			ELSE
			RETURN token_information::jwt_token;
		END IF;
       
end;]]></definition>
</function>

<function name="signinwriter"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="public.jwt_token" length="1"/>
	</return-type>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="role">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
        token_information jwt_token;
BEGIN
        SELECT $3, u.userid
               INTO token_information
               FROM awread_private.user_account u
               WHERE u.account = $1 AND u.password = crypt($2, u.password);
		IF token_information::jwt_token IS NULL
			THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác';
			ELSE
			RETURN token_information::jwt_token;
		END IF;
       
end;]]></definition>
</function>

<function name="vn_unaccent"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="_param1">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[SELECT lower(translate($1,
'¹²³ÀÁẢẠÂẤẦẨẬẪÃÄÅÆàáảạâấầẩẫậãäåæĀāĂẮẰẲẴẶăắằẳẵặĄąÇçĆćĈĉĊċČčĎďĐđÈÉẸÊẾỀỄỆËèéẹêềếễệëĒēĔĕĖėĘęĚěĜĝĞğĠġĢģĤĥĦħĨÌÍỈỊÎÏìíỉịîïĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿŀŁłÑñŃńŅņŇňŉŊŋÒÓỎỌÔỐỒỔỖỘỐỒỔỖỘƠỚỜỞỠỢÕÖòóỏọôốồổỗộơớờỡợởõöŌōŎŏŐőŒœØøŔŕŖŗŘřßŚśŜŝŞşŠšŢţŤťŦŧÙÚỦỤƯỪỨỬỮỰÛÜùúủụûưứừửữựüŨũŪūŬŭŮůŰűŲųŴŵÝýÿŶŷŸŹźŻżŽžёЁ',
'123AAAAAAAAAAAAAAaaaaaaaaaaaaaaAaAAAAAAaaaaaaAaCcCcCcCcCcDdDdEEEEEEEEEeeeeeeeeeEeEeEeEeEeGgGgGgGgHhHhIIIIIIIiiiiiiiIiIiIiIiIiJjKkkLlLlLlLlLlNnNnNnNnnNnOOOOOOOOOOOOOOOOOOOOOOOooooooooooooooooooOoOoOoEeOoRrRrRrSSsSsSsSsTtTtTtUUUUUUUUUUUUuuuuuuuuuuuuUuUuUuUuUuUuWwYyyYyYZzZzZzеЕ'));]]></definition>
</function>

<table name="book_genre" layer="0" collapse-mode="2" rls-enabled="true" max-obj-count="3" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="360" y="60"/>
	<column name="genreid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="bookid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="book_genre_pkey" type="pk-constr" table="public.book_genre">
		<columns names="genreid,bookid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="book_status" layer="0" collapse-mode="2" max-obj-count="2" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[@enum]]></comment>
	<position x="680" y="60"/>
	<column name="status" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="description">
		<type name="text" length="0"/>
	</column>
	<constraint name="book_status_pkey" type="pk-constr" table="public.book_status">
		<columns names="status" ref-type="src-columns"/>
	</constraint>
</table>

<table name="book_view" layer="0" collapse-mode="2" max-obj-count="4" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="980" y="60"/>
	<column name="userid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="chapterid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="scrolloffset">
		<type name="text" length="0" dimension="1"/>
	</column>
	<column name="lastseen">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="book_view_pkey" type="pk-constr" table="public.book_view">
		<columns names="userid,chapterid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="category" layer="0" collapse-mode="2" max-obj-count="3" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="1300" y="60"/>
	<column name="categoryid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="description">
		<type name="text" length="0"/>
	</column>
	<constraint name="category_pkey" type="pk-constr" table="public.category">
		<columns names="categoryid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="chapter" layer="0" collapse-mode="2" max-obj-count="6" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="60" y="440"/>
	<column name="chapterid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="position">
		<type name="integer" length="0"/>
	</column>
	<column name="content">
		<type name="text" length="0"/>
	</column>
	<column name="name">
		<type name="text" length="0"/>
	</column>
	<column name="bookid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="chapter_pkey" type="pk-constr" table="public.chapter">
		<columns names="chapterid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="genres" layer="0" collapse-mode="2" max-obj-count="2" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="340" y="440"/>
	<column name="genreid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="name" not-null="true">
		<type name="text" length="0"/>
	</column>
	<constraint name="genres_pkey" type="pk-constr" table="public.genres">
		<columns names="genreid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="outstanding_book" layer="0" collapse-mode="2" max-obj-count="3" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="600" y="440"/>
	<column name="date" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="bookid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="viewcount">
		<type name="integer" length="0"/>
	</column>
	<constraint name="outstanding_book_pkey" type="pk-constr" table="public.outstanding_book">
		<columns names="date,bookid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="user_book" layer="0" collapse-mode="2" rls-enabled="true" max-obj-count="3" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="960" y="440"/>
	<column name="userid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="bookid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="publishedat">
		<type name="timestamp" length="0"/>
	</column>
	<constraint name="user_book_pkey" type="pk-constr" table="public.user_book">
		<columns names="userid,bookid" ref-type="src-columns"/>
	</constraint>
</table>

<table name="users" layer="0" collapse-mode="2" rls-enabled="true" max-obj-count="12" z-value="0">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="60" y="660"/>
	<column name="userid" not-null="true">
		<type name="text" length="0"/>
	</column>
	<column name="ip_address">
		<type name="text" length="0"/>
	</column>
	<column name="photourl">
		<type name="text" length="0"/>
	</column>
	<column name="address">
		<type name="text" length="0"/>
	</column>
	<column name="role" default-value="'READER'">
		<type name="text" length="0"/>
	</column>
	<column name="fullname">
		<type name="text" length="0"/>
	</column>
	<column name="emailverified">
		<type name="boolean" length="0"/>
	</column>
	<column name="createdat">
		<type name="timestamp with time zone" length="0" with-timezone="true"/>
	</column>
	<column name="updatedat">
		<type name="timestamp with time zone" length="0" with-timezone="true"/>
	</column>
	<column name="phone">
		<type name="text" length="0"/>
	</column>
	<constraint name="users_pkey" type="pk-constr" table="public.users">
		<columns names="userid" ref-type="src-columns"/>
	</constraint>
</table>

<function name="signinreader"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="public.jwt_token" length="1"/>
	</return-type>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="role">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="firebase">
		<type name="boolean" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
        token_information jwt_token;
BEGIN
		IF firebase is not null
			THEN SELECT $3, users.userid
               INTO token_information
               FROM users
               WHERE users.userid = current_setting('jwt.claims.user_id', TRUE);
			IF token_information::jwt_token IS NULL
				THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác!';
			ELSE
				RETURN token_information::jwt_token;
			END IF; 
		else
			SELECT $3, users.userid
               INTO token_information
               FROM users
               WHERE users.account = $1 AND users.password = crypt($2, users.password);
			IF token_information::jwt_token IS NULL
				THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác';
			ELSE
				RETURN token_information::jwt_token;
			END IF;
		end if;
        
       
end;]]></definition>
</function>

<function name="signinfirebase"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="public.jwt_token" length="1"/>
	</return-type>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="role">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="firebase">
		<type name="boolean" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
        token_information jwt_token;
BEGIN
		IF firebase is not null
			THEN SELECT $3, users.userid
               INTO token_information
               FROM users
               WHERE users.userid = current_setting('jwt.claims.user_id', TRUE);
			IF token_information::jwt_token IS NULL
				THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác';
			ELSE
				RETURN token_information::jwt_token;
			END IF; 
		else
			SELECT $3, users.userid
               INTO token_information
               FROM users
               WHERE users.account = $1 AND users.password = crypt($2, users.password);
			IF token_information::jwt_token IS NULL
				THEN  RAISE EXCEPTION  'Tài khoản hay mật khẩu không chính xác';
			ELSE
				RETURN token_information::jwt_token;
			END IF;
		end if;
        
       
end;]]></definition>
</function>

<schema name="awread_private" layer="0" rect-visible="true" fill-color="#5c71fa">
	<role name="postgres"/>
</schema>

<table name="user_account" layer="0" collapse-mode="2" max-obj-count="4" z-value="0">
	<schema name="awread_private"/>
	<role name="postgres"/>
	<comment><![CDATA[Private information about a user’s account.]]></comment>
	<position x="1580" y="60"/>
	<column name="userid" not-null="true">
		<type name="text" length="0"/>
		<comment><![CDATA[The id of the user associated with this account.]]></comment>
	</column>
	<column name="email" not-null="true">
		<type name="text" length="0"/>
		<comment><![CDATA[The account of the user.]]></comment>
	</column>
	<column name="password" not-null="true">
		<type name="text" length="0"/>
		<comment><![CDATA[An opaque hash of the user’s password.]]></comment>
	</column>
	<column name="provider">
		<type name="text" length="0"/>
	</column>
	<constraint name="user_account_pkey" type="pk-constr" table="awread_private.user_account">
		<columns names="userid" ref-type="src-columns"/>
	</constraint>
</table>

<procedure name="proc_insert_user" security-type="SECURITY INVOKER">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<parameter name="userid">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="fullname">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[	
		BEGIN 
			INSERT INTO awread_private.user_account (userid, account, password) VALUES ($1, $3, crypt($4, gen_salt('bf', 8)));
			INSERT INTO users (userid, fullname) VALUES ($1, $2);
			COMMIT;
			EXCEPTION WHEN OTHERS THEN ROLLBACK;
		END;]]></definition>
</procedure>

<policy name="update_book_genre" table="public.book_genre" command="UPDATE" permissive="true">
	<roles names="writer"/>
	<expression type="using-exp"><![CDATA[(EXISTS ( SELECT users.userid,
    users.ip_address,
    users.photourl,
    users.address,
    users.role,
    users.fullname
   FROM users
  WHERE users.userid = current_user_id()))]]></expression>
</policy>
<function name="get_current_user"
		window-func="false"
		returns-setof="false"
		behavior-type="STRICT"
		function-type="IMMUTABLE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="sql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<definition><![CDATA[	select current_user ;]]></definition>
</function>

<policy name="policy_update_users" table="public.users" command="UPDATE" permissive="true">
	<roles names="writer"/>
	<expression type="using-exp"><![CDATA[userid = current_user_id()]]></expression>
</policy>
<policy name="policy_delete_user" table="public.users" command="DELETE" permissive="true">
	<roles names="writer"/>
	<expression type="using-exp"><![CDATA[userid = current_user_id()]]></expression>
</policy>
<policy name="policy_user_book" table="public.user_book" command="ALL" permissive="true">
	<roles names="writer"/>
	<expression type="using-exp"><![CDATA[userid = current_user_id()]]></expression>
</policy>
<policy name="pl_books" table="public.books" command="ALL" permissive="true">

	<expression type="using-exp"><![CDATA[(EXISTS ( SELECT ub.bookid
   FROM user_book ub
  WHERE ub.bookid = books.bookid))]]></expression>
</policy>
<policy name="pl_users" table="public.users" command="ALL" permissive="true">

	<expression type="using-exp"><![CDATA[userid = current_user_id()]]></expression>
</policy>
<function name="fn_update_new_password"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="awread_private"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="account">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="pw">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[ 
BEGIN
	IF EXISTS (SELECT * FROM awread_private.user_account u WHERE u.account = $1) THEN
		BEGIN
			UPDATE awread_private.user_account
				SET awread_private.user_account.password = crypt($2, gen_salt('bf', 8))
				WHERE awread_private.user_account.account = $1;
				RETURN 'success';
		END;
	END IF;
-- 		EXCEPTION WHEN OTHERS THEN
-- 		RAISE EXCEPTION 'invalid/update_password';
END;]]></definition>
</function>

<function name="signupp"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="public.jwt_token" length="1"/>
	</return-type>
	<parameter name="userid">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="fullname">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="accountname">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="img">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="emailverified">
		<type name="boolean" length="0"/>
	</parameter>
	<parameter name="provider">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[DECLARE
        token_information jwt_token;
BEGIN      
        BEGIN
			IF NOT EXISTS(SELECT * from awread_private.user_account where awread_private.user_account.account = $3)
			THEN  
				BEGIN
						INSERT INTO users (userid, fullname, photourl, emailverified, createdAt) VALUES ($1, $2, $5, $6, ( select now()));
						INSERT INTO awread_private.user_account (userid, account, password) VALUES ($1, $3, crypt($4, gen_salt('bf', 8)));
						SELECT 'writer', u.userid INTO token_information FROM awread_private.user_account u WHERE u.account = $3 AND u.password = crypt($4, u.password);
-- 						SELECT * INTO _user FROM  awread_private.user_account u WHERE u.account = $3;
						RETURN token_information::jwt_token;
						EXCEPTION WHEN OTHERS THEN
						RAISE EXCEPTION 'invalid/create_user';
				END;
			ELSE	
				IF provider = 'signup/email_password' THEN
					BEGIN
						IF EXISTS(SELECT u.userid FROM awread_private.user_account u WHERE u.account = $3)
						THEN RAISE EXCEPTION 'invalid/email_already_exists';
						END IF;
					END;
				ELSE
					BEGIN
						IF EXISTS(SELECT u.userid FROM awread_private.user_account u WHERE u.account = $3 AND u.password = crypt($4, u.password))
					THEN 
						BEGIN
							SELECT 'writer', u.userid
							INTO token_information
							FROM awread_private.user_account u
							WHERE u.account = $3 AND u.password = crypt($4, u.password);
							RETURN token_information::jwt_token;
							END;
						ELSE
							 RAISE EXCEPTION 'invalid/password';
						END IF;
					END;
				
				END IF;
			END IF;
		END;
END;]]></definition>
</function>

<function name="signup"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY DEFINER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="userid">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="fullname">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="img">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="emailverified">
		<type name="boolean" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="email">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="phone">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="provider">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[BEGIN      
        BEGIN
			IF NOT EXISTS(SELECT * from awread_private.user_account u where u.email = $6)
			THEN  
				BEGIN
						INSERT INTO users (userid, fullname, photourl, emailverified, phone, createdAt) 
							VALUES ($1, $2, $3, $4, $7, ( select now()));
						INSERT INTO awread_private.user_account (userid, email, password, provider) VALUES ($1, $6, $5, $8);
						RETURN 'success';
						EXCEPTION WHEN OTHERS THEN
						RAISE EXCEPTION 'invalid/create_user';
				END;
			END IF;
			RETURN 'success';
		END;
END;]]></definition>
</function>

<function name="get_user_base_email"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="public"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<parameter name="userid">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="email">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="password">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="provider">
		<type name="text" length="0"/>
	</parameter>
	</return-type>
	<parameter name="mail" in="true">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[BEGIN
		Return query  SELECT u.userid, u.email, u.password, u.provider FROM awread_private.user_account as u WHERE u.email = mail;
	END;]]></definition>
</function>

<schema name="postgraphile_watch" layer="0" rect-visible="true" fill-color="#494969">
	<role name="postgres"/>
</schema>

<function name="notify_watchers_ddl"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="postgraphile_watch"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="event_trigger" length="1"/>
	</return-type>
	<definition><![CDATA[begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'ddl',
      'payload',
      (select json_agg(json_build_object('schema', schema_name, 'command', command_tag)) from pg_event_trigger_ddl_commands() as x)
    )::text
  );
end;]]></definition>
</function>

<function name="notify_watchers_drop"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="postgraphile_watch"/>
	<role name="postgres"/>
	<language name="plpgsql"/>
	<return-type>
	<type name="event_trigger" length="1"/>
	</return-type>
	<definition><![CDATA[begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'drop',
      'payload',
      (select json_agg(distinct x.schema_name) from pg_event_trigger_dropped_objects() as x)
    )::text
  );
end;]]></definition>
</function>

<eventtrigger name="postgraphile_watch_ddl" event="ddl_command_end">
	<role name="postgres"/>
	<function signature="postgraphile_watch.notify_watchers_ddl()"/>
	<filter variable="TAG" values="ALTER AGGREGATE,ALTER DOMAIN,ALTER EXTENSION,ALTER FOREIGN TABLE,ALTER FUNCTION,ALTER POLICY,ALTER SCHEMA,ALTER TABLE,ALTER TYPE,ALTER VIEW,COMMENT,CREATE AGGREGATE,CREATE DOMAIN,CREATE EXTENSION,CREATE FOREIGN TABLE,CREATE FUNCTION,CREATE INDEX,CREATE POLICY,CREATE RULE,CREATE SCHEMA,CREATE TABLE,CREATE TABLE AS,CREATE VIEW,DROP AGGREGATE,DROP DOMAIN,DROP EXTENSION,DROP FOREIGN TABLE,DROP FUNCTION,DROP INDEX,DROP OWNED,DROP POLICY,DROP RULE,DROP SCHEMA,DROP TABLE,DROP TYPE,DROP VIEW,GRANT,REVOKE,SELECT INTO"/>
</eventtrigger>

<eventtrigger name="postgraphile_watch_drop" event="sql_drop">
	<role name="postgres"/>
	<function signature="postgraphile_watch.notify_watchers_drop()"/>
</eventtrigger>

<function name="fn_update_new_password"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[@resultFieldName status]]></comment>
	<language name="plpgsql"/>
	<return-type>
	<type name="text" length="1"/>
	</return-type>
	<parameter name="email">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="pw">
		<type name="text" length="0"/>
	</parameter>
	<parameter name="type">
		<type name="text" length="0"/>
	</parameter>
	<definition><![CDATA[BEGIN
	IF type = 'forgot' THEN
		IF EXISTS (SELECT * FROM awread_private.user_account u WHERE u.email = $1) THEN
			BEGIN
				UPDATE awread_private.user_account AS u
					SET password = $2
					WHERE u.email = $1;
					RETURN 'success';

			EXCEPTION WHEN OTHERS THEN
				RAISE EXCEPTION 'invalid/update_password';
			END;
		ELSE
			BEGIN
				RAISE EXCEPTION 'invalid/email_not_exists';
			END;
		END IF;
	ELSE
		BEGIN
			UPDATE awread_private.user_account AS u
				SET password = $2, provider = 'email/password'
				WHERE u.email = $1;
				RETURN 'success';

 			EXCEPTION WHEN OTHERS THEN
 			RAISE EXCEPTION 'invalid/update_password';
		END;
	END IF;
END;]]></definition>
</function>

<constraint name="books_categoryid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.category" table="public.books">
	<columns names="categoryid" ref-type="src-columns"/>
	<columns names="categoryid" ref-type="dst-columns"/>
</constraint>

<constraint name="books_status_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="NO ACTION" ref-table="public.book_status" table="public.books">
	<columns names="status" ref-type="src-columns"/>
	<columns names="status" ref-type="dst-columns"/>
</constraint>

<constraint name="book_genre_bookid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.books" table="public.book_genre">
	<columns names="bookid" ref-type="src-columns"/>
	<columns names="bookid" ref-type="dst-columns"/>
</constraint>

<constraint name="book_genre_genreid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.genres" table="public.book_genre">
	<columns names="genreid" ref-type="src-columns"/>
	<columns names="genreid" ref-type="dst-columns"/>
</constraint>

<constraint name="book_view_chapterid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.chapter" table="public.book_view">
	<columns names="chapterid" ref-type="src-columns"/>
	<columns names="chapterid" ref-type="dst-columns"/>
</constraint>

<constraint name="book_view_userid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.users" table="public.book_view">
	<columns names="userid" ref-type="src-columns"/>
	<columns names="userid" ref-type="dst-columns"/>
</constraint>

<constraint name="chapter_bookid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.books" table="public.chapter">
	<columns names="bookid" ref-type="src-columns"/>
	<columns names="bookid" ref-type="dst-columns"/>
</constraint>

<constraint name="outstanding_book_bookid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.books" table="public.outstanding_book">
	<columns names="bookid" ref-type="src-columns"/>
	<columns names="bookid" ref-type="dst-columns"/>
</constraint>

<constraint name="user_book_userid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.users" table="public.user_book">
	<columns names="userid" ref-type="src-columns"/>
	<columns names="userid" ref-type="dst-columns"/>
</constraint>

<constraint name="user_book_bookid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="CASCADE" del-action="CASCADE" ref-table="public.books" table="public.user_book">
	<columns names="bookid" ref-type="src-columns"/>
	<columns names="bookid" ref-type="dst-columns"/>
</constraint>

<constraint name="user_account_userid_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="public.users" table="awread_private.user_account">
	<columns names="userid" ref-type="src-columns"/>
	<columns names="userid" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_books_category" type="relfk" layer="0"
	 custom-color="#7d9b5e"
	 src-table="public.books"
	 dst-table="public.category" reference-fk="books_categoryid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_books_book_status" type="relfk" layer="0"
	 custom-color="#afdd9d"
	 src-table="public.books"
	 dst-table="public.book_status" reference-fk="books_status_fkey"
	 src-required="false" dst-required="false"/>

<relationship name="rel_book_genre_books" type="relfk" layer="0"
	 custom-color="#bd8629"
	 src-table="public.book_genre"
	 dst-table="public.books" reference-fk="book_genre_bookid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_book_genre_genres" type="relfk" layer="0"
	 custom-color="#b69b66"
	 src-table="public.book_genre"
	 dst-table="public.genres" reference-fk="book_genre_genreid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_book_view_chapter" type="relfk" layer="0"
	 custom-color="#5aea61"
	 src-table="public.book_view"
	 dst-table="public.chapter" reference-fk="book_view_chapterid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_book_view_users" type="relfk" layer="0"
	 custom-color="#3dc44a"
	 src-table="public.book_view"
	 dst-table="public.users" reference-fk="book_view_userid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_chapter_books" type="relfk" layer="0"
	 custom-color="#ae69b8"
	 src-table="public.chapter"
	 dst-table="public.books" reference-fk="chapter_bookid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_outstanding_book_books" type="relfk" layer="0"
	 custom-color="#305276"
	 src-table="public.outstanding_book"
	 dst-table="public.books" reference-fk="outstanding_book_bookid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_user_book_users" type="relfk" layer="0"
	 custom-color="#93f259"
	 src-table="public.user_book"
	 dst-table="public.users" reference-fk="user_book_userid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_user_book_books" type="relfk" layer="0"
	 custom-color="#b70d6d"
	 src-table="public.user_book"
	 dst-table="public.books" reference-fk="user_book_bookid_fkey"
	 src-required="false" dst-required="true"/>

<relationship name="rel_user_account_users" type="relfk" layer="0"
	 custom-color="#764fed"
	 src-table="awread_private.user_account"
	 dst-table="public.users" reference-fk="user_account_userid_fkey"
	 src-required="false" dst-required="true"/>

<permission>
	<object name="public" type="schema"/>
	<roles names="postgres"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="public" type="schema"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="public" type="schema"/>
	<roles names="admin"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="public" type="schema"/>
	<roles names="writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="public.books" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.books" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.books" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.books" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.all_nominated_book(text[],text[])" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.all_nominated_book(text[],text[])" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_roles()" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_roles()" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_user_id()" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_user_id()" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_user_id()" type="function"/>
	<roles names="writer"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.current_user_id()" type="function"/>
	<roles names="admin"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.filter_books(integer,text,integer)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.filter_books(integer,text,integer)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.filter_by_tags(text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.filter_by_tags(text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.increase_view_book_in_day(text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.increase_view_book_in_day(text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.insert_book_genre(text[],text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.insert_book_genre(text[],text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.insert_user_book(text[],text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.insert_user_book(text[],text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signinreader(text,text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signinreader(text,text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signinwriter(text,text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signinwriter(text,text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.book_genre" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_genre" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.book_genre" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_genre" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.book_status" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_status" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.book_status" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_status" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.book_view" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_view" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.book_view" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.book_view" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.category" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.category" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.category" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.category" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.chapter" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.chapter" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.chapter" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.chapter" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.genres" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.genres" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.genres" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.genres" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.outstanding_book" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.outstanding_book" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.outstanding_book" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.outstanding_book" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.user_book" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.user_book" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="public.user_book" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.user_book" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" insert="true" update="true"/>
</permission>
<permission>
	<object name="public.users" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="table"/>
	<roles names="anonymous"/>
	<privileges insert="true"/>
</permission>
<permission>
	<object name="public.users" type="table"/>
	<roles names="admin"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="public.users" type="table"/>
	<roles names="writer"/>
	<privileges select="true" delete="true" update="true"/>
</permission>
<permission>
	<object name="awread_private" type="schema"/>
	<roles names="postgres"/>
	<privileges create="true" usage="true"/>
</permission>
<permission>
	<object name="awread_private" type="schema"/>
	<roles names="anonymous"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="awread_private" type="schema"/>
	<roles names="writer"/>
	<privileges usage="true"/>
</permission>
<permission>
	<object name="awread_private.user_account" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
<permission>
	<object name="awread_private.user_account" type="table"/>
	<roles names="anonymous"/>
	<privileges select="true" update="true"/>
</permission>
<permission>
	<object name="awread_private.user_account" type="table"/>
	<roles names="writer"/>
	<privileges select="true" update="true"/>
</permission>
<permission>
	<object name="public.get_current_user()" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.get_current_user()" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text,text,boolean,text,text,text,text)" type="function"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text,text,boolean,text,text,text,text)" type="function"/>
	<roles names="postgres"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text,text,boolean,text,text,text,text)" type="function"/>
	<roles names="anonymous"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="public.signup(text,text,text,boolean,text,text,text,text)" type="function"/>
	<roles names="writer"/>
	<privileges execute="true"/>
</permission>
<permission>
	<object name="bookid" parent="public.books" type="column"/>
	<roles names="writer"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="rate" parent="public.books" type="column"/>
	<roles names="writer"/>
	<privileges update="true"/>
</permission>
<permission>
	<object name="completed" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="publishedat" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="updatedat" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="viewcount" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="categoryid" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="tags" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="type" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="status" parent="public.books" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="userid" parent="public.users" type="column"/>
	<roles names="postgres"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="userid" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="ip_address" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="photourl" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="address" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="role" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
<permission>
	<object name="fullname" parent="public.users" type="column"/>
	<roles names="anonymous"/>
	<privileges select="true"/>
</permission>
</dbmodel>
